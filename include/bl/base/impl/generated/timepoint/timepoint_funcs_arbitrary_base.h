/*
Autogenerated file by running:
scripts/autogenerator.sh -f source-generation/timepoint_funcs_arbitrary_base.gen.h -r BITS=32 -r BITS=64 -r BITS=

Don't edit.
*/
/* AUTOGENERATE: include/bl/base/impl/generated/timepoint/timepoint_funcs_arbitrary_base.h */
/*---------------------------------------------------------------------------*/
#ifndef __BL_TIMEPOINT_FNS_ARBITRARY_BASE_H__
#define __BL_TIMEPOINT_FNS_ARBITRARY_BASE_H__

/*this file will be included from other files that have the missing defines*/
#include <bl/base/libexport.h>

#define BL_TIMEPOINT_HAS_ARBITRARY_BASE 1
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timeoft bl_timept_to_private(bl_timept ts, bl_u factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timeoft
  bl_timept_to_ceil_private (bl_timept ts, bl_u factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timept
  bl_to_timept_private (bl_timeoft amt, bl_u factor);
/*---------------------------------------------------------------------------*/
static inline bl_timeoft bl_timept_to_sec (bl_timept ts)
{
  return bl_timept_to_private (ts, 1);
}

static inline bl_timeoft bl_timept_to_msec (bl_timept ts)
{
  return bl_timept_to_private (ts, bl_msec_in_sec);
}

static inline bl_timeoft bl_timept_to_usec (bl_timept ts)
{
  return bl_timept_to_private (ts, bl_usec_in_sec);
}

static inline bl_timeoft bl_timept_to_nsec (bl_timept ts)
{
  return bl_timept_to_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_timeoft bl_timept_to_sec_ceil (bl_timept ts)
{
   return bl_timept_to_ceil_private (ts, 1);
}

static inline bl_timeoft bl_timept_to_msec_ceil (bl_timept ts)
{
  return bl_timept_to_ceil_private (ts, bl_msec_in_sec);
}

static inline bl_timeoft bl_timept_to_usec_ceil (bl_timept ts)
{
  return bl_timept_to_ceil_private (ts, bl_usec_in_sec);
}

static inline bl_timeoft bl_timept_to_nsec_ceil (bl_timept ts)
{
  return bl_timept_to_ceil_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_timeoft bl_sec_to_timept_max (void)
{
  return bl_timept_to_sec (bl_timept_max_safe_add_sub);
}

static inline bl_timeoft bl_msec_to_timept_max (void)
{
  return bl_timept_to_msec (bl_timept_max_safe_add_sub);
}

static inline bl_timeoft bl_usec_to_timept_max (void)
{
  return bl_timept_to_usec (bl_timept_max_safe_add_sub);
}

static inline bl_timeoft bl_nsec_to_timept_max (void)
{
  return bl_timept_to_nsec (bl_timept_max_safe_add_sub);
}
/*---------------------------------------------------------------------------*/
static inline bl_timept bl_sec_to_timept (bl_timeoft sec)
{
  bl_assert (sec <= bl_sec_to_timept_max ());
  return bl_to_timept_private (sec, 1);
}

static inline bl_timept bl_msec_to_timept (bl_timeoft msec)
{
  bl_assert (msec <= bl_msec_to_timept_max ());
  return bl_to_timept_private (msec, bl_msec_in_sec);
}

static inline bl_timept bl_usec_to_timept (bl_timeoft usec)
{
  bl_assert (usec <= bl_usec_to_timept_max ());
  return bl_to_timept_private (usec, bl_usec_in_sec);
}

static inline bl_timept bl_nsec_to_timept (bl_timeoft nsec)
{
  bl_assert (nsec <= bl_nsec_to_timept_max ());
  return bl_to_timept_private (nsec, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
#endif /* __TIMEPOINT_FNS_ARBITRARY_BASE_H__ */
