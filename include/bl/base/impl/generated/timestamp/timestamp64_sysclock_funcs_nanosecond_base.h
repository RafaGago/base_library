/*
Autogenerated file by running:
scripts/autogenerator.sh -f source-generation/timestamp_sysclock_funcs_nanosecond_base.gen.h -r BITS=64 -r BITS=

Don't edit.
*/
/* AUTOGENERATE: include/bl/base/impl/generated/timestamp/timestamp64_sysclock_funcs_nanosecond_base.h */
/*---------------------------------------------------------------------------*/
#ifndef __BL_TIMESTAMP64_SYSCLOCK_FNS_NANOSECOND_BASE_H__
#define __BL_TIMESTAMP64_SYSCLOCK_FNS_NANOSECOND_BASE_H__

/*this file will be included from other files that have the missing defines*/
#include <bl/base/static_integer_math.h>
/*---------------------------------------------------------------------------*/
#define BL_TIMESTAMP64_SYSCLOCK_HAS_NANOSECOND_BASE 1
/*---------------------------------------------------------------------------*/
#define bl_tstamp64_sysclock_to_sec_priv(ts)\
  ((bl_toffset64) (ts / bl_nsec_in_sec))

#define bl_tstamp64_sysclock_to_msec_priv(ts)\
  ((bl_toffset64) (ts / bl_nsec_in_msec))

#define bl_tstamp64_sysclock_to_usec_priv(ts)\
  ((bl_toffset64) (ts / bl_nsec_in_usec))

#define bl_tstamp64_sysclock_to_nsec_priv(ts)\
  ((bl_toffset64) ts)
/*---------------------------------------------------------------------------*/
#define bl_sec_to_tstamp64_sysclock_max()\
  bl_tstamp64_sysclock_to_sec_priv (bl_tstamp64_max_safe_add_sub)

#define bl_msec_to_tstamp64_sysclock_max()\
  bl_tstamp64_sysclock_to_msec_priv (bl_tstamp64_max_safe_add_sub)

#define bl_nsec_to_tstamp64_sysclock_max()\
  bl_tstamp64_sysclock_to_nsec_priv (bl_tstamp64_max_safe_add_sub)

#define bl_usec_to_tstamp64_sysclock_max()\
  bl_tstamp64_sysclock_to_usec_priv (bl_tstamp64_max_safe_add_sub)
/*---------------------------------------------------------------------------*/
static inline bl_toffset64 bl_tstamp64_sysclock_to_sec (bl_tstamp64 ts)
{
  return bl_tstamp64_sysclock_to_sec_priv (ts);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_msec (bl_tstamp64 ts)
{
  return bl_tstamp64_sysclock_to_msec_priv (ts);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_usec (bl_tstamp64 ts)
{
  return bl_tstamp64_sysclock_to_usec_priv (ts);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_nsec (bl_tstamp64 ts)
{
  return bl_tstamp64_sysclock_to_nsec_priv (ts);
}
/*---------------------------------------------------------------------------*/
static inline bl_toffset64 bl_tstamp64_sysclock_to_sec_ceil (bl_tstamp64 ts)
{
  return (bl_toffset64) bl_div_ceil (ts, bl_nsec_in_sec);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_msec_ceil (bl_tstamp64 ts)
{
  return (bl_toffset64) bl_div_ceil (ts, bl_nsec_in_msec);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_usec_ceil (bl_tstamp64 ts)
{
  return (bl_toffset64) bl_div_ceil (ts, bl_nsec_in_usec);
}

static inline bl_toffset64 bl_tstamp64_sysclock_to_nsec_ceil (bl_tstamp64 ts)
{
  return (bl_toffset64) (ts);
}
/*---------------------------------------------------------------------------*/
static inline bl_tstamp64 bl_sec_to_tstamp64_sysclock (bl_toffset64 sec)
{
  bl_assert (sec <= bl_sec_to_tstamp64_sysclock_max());
  return ((bl_tstamp64) sec) * bl_nsec_in_sec;
}

static inline bl_tstamp64 bl_msec_to_tstamp64_sysclock (bl_toffset64 msec)
{
  bl_assert (msec <= bl_msec_to_tstamp64_sysclock_max());
  return ((bl_tstamp64) msec) * bl_nsec_in_msec;
}

static inline bl_tstamp64 bl_usec_to_tstamp64_sysclock (bl_toffset64 usec)
{
  bl_assert (usec <= bl_usec_to_tstamp64_sysclock_max());
  return ((bl_tstamp64) usec) * bl_nsec_in_usec;
}

static inline bl_tstamp64 bl_nsec_to_tstamp64_sysclock (bl_toffset64 nsec)
{
  bl_assert (nsec <= bl_nsec_to_tstamp64_sysclock_max());
  return (bl_tstamp64) nsec;
}
/*---------------------------------------------------------------------------*/

#endif /*__TIMESTAMP64_FNS_NANOSECOND_BASE_H__*/
