/*
Autogenerated file by running:
scripts/autogenerator.sh -f source-generation/timestamp_funcs_arbitrary_base.gen.h -r BITS=32 -r BITS=64 -r BITS=

Don't edit.
*/
/* AUTOGENERATE: include/bl/base/impl/generated/timestamp/timestamp32_funcs_arbitrary_base.h */
/*---------------------------------------------------------------------------*/
#ifndef __BL_TIMESTAMP32_FNS_ARBITRARY_BASE_H__
#define __BL_TIMESTAMP32_FNS_ARBITRARY_BASE_H__

/*this file will be included from other files that have the missing defines*/
#include <bl/base/libexport.h>

#define BL_TIMESTAMP32_HAS_ARBITRARY_BASE 1
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_toffset32 bl_tstamp32_to_private(bl_tstamp32 ts, bl_u32 factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_toffset32
  bl_tstamp32_to_ceil_private (bl_tstamp32 ts, bl_u32 factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_tstamp32
  bl_to_tstamp32_private (bl_toffset32 amt, bl_u32 factor);
/*---------------------------------------------------------------------------*/
static inline bl_toffset32 bl_tstamp32_to_sec (bl_tstamp32 ts)
{
  return bl_tstamp32_to_private (ts, 1);
}

static inline bl_toffset32 bl_tstamp32_to_msec (bl_tstamp32 ts)
{
  return bl_tstamp32_to_private (ts, bl_msec_in_sec);
}

static inline bl_toffset32 bl_tstamp32_to_usec (bl_tstamp32 ts)
{
  return bl_tstamp32_to_private (ts, bl_usec_in_sec);
}

static inline bl_toffset32 bl_tstamp32_to_nsec (bl_tstamp32 ts)
{
  return bl_tstamp32_to_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_toffset32 bl_tstamp32_to_sec_ceil (bl_tstamp32 ts)
{
   return bl_tstamp32_to_ceil_private (ts, 1);
}

static inline bl_toffset32 bl_tstamp32_to_msec_ceil (bl_tstamp32 ts)
{
  return bl_tstamp32_to_ceil_private (ts, bl_msec_in_sec);
}

static inline bl_toffset32 bl_tstamp32_to_usec_ceil (bl_tstamp32 ts)
{
  return bl_tstamp32_to_ceil_private (ts, bl_usec_in_sec);
}

static inline bl_toffset32 bl_tstamp32_to_nsec_ceil (bl_tstamp32 ts)
{
  return bl_tstamp32_to_ceil_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_toffset32 bl_sec_to_tstamp32_max (void)
{
  return bl_tstamp32_to_sec (bl_tstamp32_max_safe_add_sub);
}

static inline bl_toffset32 bl_msec_to_tstamp32_max (void)
{
  return bl_tstamp32_to_msec (bl_tstamp32_max_safe_add_sub);
}

static inline bl_toffset32 bl_usec_to_tstamp32_max (void)
{
  return bl_tstamp32_to_usec (bl_tstamp32_max_safe_add_sub);
}

static inline bl_toffset32 bl_nsec_to_tstamp32_max (void)
{
  return bl_tstamp32_to_nsec (bl_tstamp32_max_safe_add_sub);
}
/*---------------------------------------------------------------------------*/
static inline bl_tstamp32 bl_sec_to_tstamp32 (bl_toffset32 sec)
{
  bl_assert (sec <= bl_sec_to_tstamp32_max ());
  return bl_to_tstamp32_private (sec, 1);
}

static inline bl_tstamp32 bl_msec_to_tstamp32 (bl_toffset32 msec)
{
  bl_assert (msec <= bl_msec_to_tstamp32_max ());
  return bl_to_tstamp32_private (msec, bl_msec_in_sec);
}

static inline bl_tstamp32 bl_usec_to_tstamp32 (bl_toffset32 usec)
{
  bl_assert (usec <= bl_usec_to_tstamp32_max ());
  return bl_to_tstamp32_private (usec, bl_usec_in_sec);
}

static inline bl_tstamp32 bl_nsec_to_tstamp32 (bl_toffset32 nsec)
{
  bl_assert (nsec <= bl_nsec_to_tstamp32_max ());
  return bl_to_tstamp32_private (nsec, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
#endif /* __TIMESTAMP32_FNS_ARBITRARY_BASE_H__ */
