/*
Autogenerated file by running:
scripts/autogenerator.sh -f source-generation/timepoint_funcs_arbitrary_base.gen.h -r BITS=64,CLOCKNAME=timept64,EXPORT=BL_EXPORT,INCLUDE_HDR=base/libexport.h,INCLUDE_SRC=base/time.h,HDR_PREFIX=base/impl/generated/time,SRC_PREFIX=base/generated/time -r BITS=32,CLOCKNAME=timept32,EXPORT=BL_EXPORT,INCLUDE_HDR=base/libexport.h,INCLUDE_SRC=base/time.h,HDR_PREFIX=base/impl/generated/time,SRC_PREFIX=base/generated/time -r BITS=64,CLOCKNAME=cpu_timept,EXPORT=BL_TIME_EXTRAS_EXPORT,INCLUDE_HDR=time_extras/libexport.h,INCLUDE_SRC=time_extras/time_extras.h,HDR_PREFIX=time_extras/generated,SRC_PREFIX=time_extras/generated

Don't edit.
*/
/* AUTOGENERATE: include/bl/base/impl/generated/time/timept64_funcs_arbitrary_base.h */
/*---------------------------------------------------------------------------*/
#ifndef __BL_TIMEPT64_FNS_ARBITRARY_BASE_H__
#define __BL_TIMEPT64_FNS_ARBITRARY_BASE_H__

/*this file will be included from other files that have the missing defines*/
#include <bl/base/libexport.h>

#define BL_TIMEPT64_HAS_ARBITRARY_BASE 1
#define BL_TIMEPT64_BITS (sizeof (bl_timept64) * 8)
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timeoft64
  bl_timept64_to_time_private (bl_timept64 ts, bl_u64 factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timeoft64
  bl_timept64_to_time_ceil_private (bl_timept64 amt, bl_u64 factor);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_timept64
  bl_time_to_timept64_private (bl_timeoft64 amt, bl_u64 factor);
/*---------------------------------------------------------------------------*/
static inline bl_timeoft64 bl_timept64_to_sec (bl_timept64 ts)
{
  return bl_timept64_to_time_private (ts, 1);
}

static inline bl_timeoft64 bl_timept64_to_msec (bl_timept64 ts)
{
  return bl_timept64_to_time_private (ts, bl_msec_in_sec);
}

static inline bl_timeoft64 bl_timept64_to_usec (bl_timept64 ts)
{
  return bl_timept64_to_time_private (ts, bl_usec_in_sec);
}

static inline bl_timeoft64 bl_timept64_to_nsec (bl_timept64 ts)
{
  return bl_timept64_to_time_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_timeoft64 bl_timept64_to_sec_ceil (bl_timept64 ts)
{
   return bl_timept64_to_time_ceil_private (ts, 1);
}

static inline bl_timeoft64 bl_timept64_to_msec_ceil (bl_timept64 ts)
{
  return bl_timept64_to_time_ceil_private (ts, bl_msec_in_sec);
}

static inline bl_timeoft64 bl_timept64_to_usec_ceil (bl_timept64 ts)
{
  return bl_timept64_to_time_ceil_private (ts, bl_usec_in_sec);
}

static inline bl_timeoft64 bl_timept64_to_nsec_ceil (bl_timept64 ts)
{
  return bl_timept64_to_time_ceil_private (ts, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
static inline bl_timeoft64 bl_sec_to_timept64_max (void)
{
  return bl_timept64_to_sec (bl_timept64_max_safe_add_sub);
}

static inline bl_timeoft64 bl_msec_to_timept64_max (void)
{
  return bl_timept64_to_msec (bl_timept64_max_safe_add_sub);
}

static inline bl_timeoft64 bl_usec_to_timept64_max (void)
{
  return bl_timept64_to_usec (bl_timept64_max_safe_add_sub);
}

static inline bl_timeoft64 bl_nsec_to_timept64_max (void)
{
  return bl_timept64_to_nsec (bl_timept64_max_safe_add_sub);
}
/*---------------------------------------------------------------------------*/
static inline bl_timept64 bl_sec_to_timept64 (bl_timeoft64 sec)
{
  bl_assert (sec <= bl_sec_to_timept64_max ());
  return bl_time_to_timept64_private (sec, 1);
}

static inline bl_timept64 bl_msec_to_timept64 (bl_timeoft64 msec)
{
  bl_assert (msec <= bl_msec_to_timept64_max ());
  return bl_time_to_timept64_private (msec, bl_msec_in_sec);
}

static inline bl_timept64 bl_usec_to_timept64 (bl_timeoft64 usec)
{
  bl_assert (usec <= bl_usec_to_timept64_max ());
  return bl_time_to_timept64_private (usec, bl_usec_in_sec);
}
static inline bl_timept64 bl_nsec_to_timept64 (bl_timeoft64 nsec)
{
  bl_assert (nsec <= bl_nsec_to_timept64_max ());
  return bl_time_to_timept64_private (nsec, bl_nsec_in_sec);
}
/*---------------------------------------------------------------------------*/
#endif /* #ifndef __BL_TIMEPT64_FNS_ARBITRARY_BASE_H__*/

/*---------------------------------------------------------------------------*/
