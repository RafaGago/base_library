/*
Autogenerated file by running:
scripts/autogenerator.sh -f source-generation/array_linked_list.gen.h -r TYPE=u8 -r TYPE=u16 -r TYPE=u32 -r TYPE=u64

Don't edit.
*/
/* AUTOGENERATE: include/bl/base/impl/generated/array_linked_list_u32.h */
/*---------------------------------------------------------------------------*/
#ifndef __BL_ARRAY_LINKED_LIST_u32_H__
#define __BL_ARRAY_LINKED_LIST_u32_H__

#include <bl/base/assert.h>
#include <bl/base/libexport.h>
#include <bl/base/platform.h>
#include <bl/base/integer.h>
#include <bl/base/utility.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef bl_u32 bl_alnls_u32_it;
/*---------------------------------------------------------------------------*/
typedef struct bl_alnls_u32 {
  bl_uword capacity;
  bl_uword size;
  bl_u32  head;
  bl_u32* nodes;
}
bl_alnls_u32;
/*---------------------------------------------------------------------------*/
#define bl_alnls_u32_foreach(type_ptr, it_var)\
  for(\
    bl_alnls_u32_it bl_alnls_u32_priv_curr_it =\
        bl_alnls_u32_it_begin ((type_ptr)),\
      it_var = bl_alnls_u32_priv_curr_it;\
    bl_alnls_u32_it_in_range ((type_ptr), bl_alnls_u32_priv_curr_it) &&\
      (bl_alnls_u32_priv_curr_it =\
        bl_alnls_u32_it_next ((type_ptr), bl_alnls_u32_priv_curr_it), 1);\
    it_var = bl_alnls_u32_priv_curr_it\
    )
/*---------------------------------------------------------------------------*/
#define bl_alnls_u32_foreach_read_only(type_ptr, it_var)\
  for(\
    it_var = bl_alnls_u32_it_begin ((type_ptr));\
    bl_alnls_u32_it_in_range ((type_ptr), it_var);\
    it_var = bl_alnls_u32_it_next ((type_ptr), it_var)\
    )
/*---------------------------------------------------------------------------*/
#define bl_alnls_u32_init(list, backing_nodes_array)\
  bl_alnls_u32_init_impl(\
    (list),\
    (backing_nodes_array),\
    bl_arr_elems (backing_nodes_array)\
    )
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it bl_alnls_u32_it_end (bl_alnls_u32* l)
{
  return l->capacity;
}
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it bl_alnls_u32_it_begin (bl_alnls_u32* l)
{
  return l->head;
}
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it bl_alnls_u32_capacity (bl_alnls_u32* l)
{
  return l->capacity;
}
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it bl_alnls_u32_size (bl_alnls_u32* l)
{
  return l->size;
}
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it
  bl_alnls_u32_it_in_range (bl_alnls_u32* l, bl_alnls_u32_it it)
{
  return it < l->capacity;
}
/*---------------------------------------------------------------------------*/
static inline bool bl_alnls_u32_is_empty (bl_alnls_u32* l)
{
  return bl_alnls_u32_it_begin (l) == bl_alnls_u32_it_end (l);
}
/*---------------------------------------------------------------------------*/
static inline bl_alnls_u32_it
  bl_alnls_u32_it_next (bl_alnls_u32* l, bl_alnls_u32_it it)
{
  return l->nodes[it];
}
/*---------------------------------------------------------------------------*/
static inline void
  bl_alnls_u32_node_release (bl_alnls_u32* l, bl_alnls_u32_it it)
{
  l->nodes[it] = it;
}
/*---------------------------------------------------------------------------*/
static inline bool
  bl_alnls_u32_node_is_free (bl_alnls_u32* l, bl_alnls_u32_it it)
{
  return l->nodes[it] == it;
}
/*---------------------------------------------------------------------------*/
static inline void bl_alnls_u32_acquire_node_unsafe(
  bl_alnls_u32* l, bl_alnls_u32_it it
  )
{
  bl_assert (it < bl_alnls_u32_capacity (l));
  bl_assert (bl_alnls_u32_node_is_free (l, it));
  l->nodes[it] = bl_alnls_u32_it_end (l);
}
/*---------------------------------------------------------------------------*/
extern BL_EXPORT void bl_alnls_u32_init_impl(
  bl_alnls_u32* l, bl_u32* nodes, bl_uword nodes_capacity
  );
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_alnls_u32_it
  bl_alnls_u32_try_acquire_node (bl_alnls_u32* l, bl_alnls_u32_it n);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_alnls_u32_it
  bl_alnls_u32_try_acquire_a_node (bl_alnls_u32* l);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT void
  bl_alnls_u32_insert_head (bl_alnls_u32* l, bl_alnls_u32_it n);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_alnls_u32_it
  bl_alnls_u32_drop_head (bl_alnls_u32* l);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT void
  bl_alnls_u32_insert_tail (bl_alnls_u32* l, bl_alnls_u32_it n);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_alnls_u32_it
  bl_alnls_u32_drop (bl_alnls_u32* l, bl_alnls_u32_it n);
/*---------------------------------------------------------------------------*/
extern BL_EXPORT bl_alnls_u32_it
  bl_alnls_u32_drop_tail (bl_alnls_u32* l);

#ifdef __cplusplus
} /*extern "C" {*/
#endif
#endif /* #define __BL_ARRAY_LINKED_LIST_u32_H__ */

/*---------------------------------------------------------------------------*/
